name: Auto Release on Changelog Update

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use latest from CHANGELOG.md)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'

jobs:
  create-or-update-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version from CHANGELOG
        id: get-version
        run: |
          if [[ ! -z "${{ inputs.version }}" ]]; then
            # Use manually specified version
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract the first version number from CHANGELOG.md
            VERSION=$(grep -m 1 '^## \[*[0-9]\+\.[0-9]\+\.[0-9]\+' CHANGELOG.md | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
            if [ -z "$VERSION" ]; then
              echo "No version found in CHANGELOG.md"
              exit 1
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        run: |
          # Update version in package.json
          npm version ${{ steps.get-version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Get changelog entry
        id: get-changelog
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          # Create a temporary file for the changelog
          TEMP_CHANGELOG=$(mktemp)
          
          # Extract content for specific version and clean it up
          awk -v ver="$VERSION" '
            $0 ~ "^## \\[*"ver"\\]" { p=1; next }
            /^## \[*[0-9]+\.[0-9]+\.[0-9]+/ { if (p) exit }
            p { print }
          ' CHANGELOG.md | sed '/^$/N;/^\n$/D' > "$TEMP_CHANGELOG"
          
          # Read the cleaned changelog and encode it properly for GitHub Actions
          CHANGELOG=$(cat "$TEMP_CHANGELOG")
          
          # Use Python to properly encode the changelog
          ENCODED_CHANGELOG=$(python3 -c "import sys, json; print(json.dumps(sys.stdin.read()))" <<< "$CHANGELOG")
          echo "changelog=$ENCODED_CHANGELOG" >> $GITHUB_OUTPUT
          
          # Clean up temporary file
          rm "$TEMP_CHANGELOG"

      - name: Check if tag exists
        id: check-tag
        run: |
          if git rev-parse "v${{ steps.get-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit package.json changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.get-version.outputs.version }}"
          git push

      - name: Update existing release
        if: steps.check-tag.outputs.exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'v${{ steps.get-version.outputs.version }}';
            const changelog = JSON.parse('${{ steps.get-changelog.outputs.changelog }}');
            
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const existingRelease = releases.data.find(release => release.tag_name === tag);
            
            if (existingRelease) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
                body: changelog
              });
            } else {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: changelog,
                draft: false,
                prerelease: false
              });
            }

      - name: Create new release and tag
        if: steps.check-tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const changelog = JSON.parse('${{ steps.get-changelog.outputs.changelog }}');
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.get-version.outputs.version }}',
              name: 'Release v${{ steps.get-version.outputs.version }}',
              body: changelog,
              draft: false,
              prerelease: false
            });