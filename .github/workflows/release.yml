name: Auto Release on Changelog Update

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (leave empty to use latest from CHANGELOG.md)"
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - "CHANGELOG.md"

jobs:
  create-or-update-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version from CHANGELOG
        id: get-version
        run: |
          if [[ ! -z "${{ inputs.version }}" ]]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -m 1 '^## \[*[0-9]\+\.[0-9]\+\.[0-9]\+' CHANGELOG.md | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
            if [ -z "$VERSION" ]; then
              echo "No version found in CHANGELOG.md"
              exit 1
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Get changelog entry
        id: get-changelog
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"

          # Extract changelog content and properly encode it for JSON
          CHANGELOG_CONTENT=$(awk -v ver="$VERSION" '
            $0 ~ "^## \\[*"ver"\\]" { p=1; next }
            /^## \[*[0-9]+\.[0-9]+\.[0-9]+/ { if (p) exit }
            p { print }
          ' CHANGELOG.md)

          # Use Python to properly encode the changelog content as JSON
          echo "changelog=$(python3 -c '
          import json
          import sys
          content = sys.stdin.read().strip()
          print(json.dumps(content))
              ' <<< "$CHANGELOG_CONTENT")" >> $GITHUB_OUTPUT

      - name: Create or update release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'v${{ steps.get-version.outputs.version }}';
            // The changelog content is already properly JSON-encoded at this point
            const changelog = ${{ steps.get-changelog.outputs.changelog }};

            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const existingRelease = releases.data.find(release => release.tag_name === tag);

            if (existingRelease) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
                body: changelog
              });
            } else {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: changelog,
                draft: false,
                prerelease: false
              });
            }
