name: Auto Release on Changelog Update

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use latest from CHANGELOG.md)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'

jobs:
  create-or-update-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version from CHANGELOG
        id: get-version
        run: |
          if [[ ! -z "${{ inputs.version }}" ]]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -m 1 '^## \[*[0-9]\+\.[0-9]\+\.[0-9]\+' CHANGELOG.md | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
            if [ -z "$VERSION" ]; then
              echo "No version found in CHANGELOG.md"
              exit 1
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Get changelog entry
        id: get-changelog
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Create a temporary Python script for proper JSON encoding
          cat > encode_changelog.py << 'EOF'
          import sys
          import json
          import re
          
          def extract_changelog(version, content):
              pattern = rf"^## \[*{version}\].*?(?=^## \[|\Z)"
              match = re.search(pattern, content, re.MULTILINE | re.DOTALL)
              if match:
                  # Remove the version header line and clean up the content
                  changelog = re.sub(r'^## \[.*?\].*?\n', '', match.group(0))
                  return changelog.strip()
              return ""
          
          # Read the entire CHANGELOG.md
          with open('CHANGELOG.md', 'r') as f:
              content = f.read()
          
          # Get the version from environment
          version = sys.argv[1]
          
          # Extract and encode the changelog entry
          changelog = extract_changelog(version, content)
          
          # Print as JSON-encoded string
          print(json.dumps(changelog))
          EOF
          
          # Run the Python script and capture the output
          CHANGELOG_JSON=$(python3 encode_changelog.py "$VERSION")
          echo "changelog=$CHANGELOG_JSON" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          if git rev-parse "v${{ steps.get-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or update release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'v${{ steps.get-version.outputs.version }}';
            const changelog = JSON.parse(${{ steps.get-changelog.outputs.changelog }});
            
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const existingRelease = releases.data.find(release => release.tag_name === tag);
            
            if (existingRelease) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
                body: changelog
              });
            } else {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: changelog,
                draft: false,
                prerelease: false
              });
            }